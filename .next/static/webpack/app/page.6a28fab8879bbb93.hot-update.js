"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/database.ts":
/*!*************************!*\
  !*** ./lib/database.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Database: function() { return /* binding */ Database; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nclass Database {\n    static getInstance() {\n        if (!Database.instance) {\n            Database.instance = new Database();\n        }\n        return Database.instance;\n    }\n    async delay(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    async signInWithWallet(walletAddress) {\n        let retryCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        if (Database.isAuthenticating) {\n            await this.delay(1000); // Wait 1 second before retrying\n            return this.signInWithWallet(walletAddress, retryCount);\n        }\n        try {\n            var _session_user;\n            Database.isAuthenticating = true;\n            // Clear any existing timeout\n            if (Database.authTimeout) {\n                clearTimeout(Database.authTimeout);\n                Database.authTimeout = null;\n            }\n            const email = \"\".concat(walletAddress.toLowerCase(), \"@web3chat.com\");\n            const password = \"\".concat(walletAddress.toLowerCase(), \"_secret\");\n            // Check current session\n            const { data: { session } } = await this.supabase.auth.getSession();\n            // If already signed in with the same wallet, return the session\n            if ((session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.email) === email) {\n                return {\n                    data: session\n                };\n            }\n            // Sign out if signed in with a different wallet\n            if (session) {\n                await this.supabase.auth.signOut();\n                await this.delay(1000); // Wait for signout to complete\n            }\n            // Try to sign in\n            const { data, error: signInError } = await this.supabase.auth.signInWithPassword({\n                email,\n                password\n            });\n            if (!signInError) {\n                return {\n                    data\n                };\n            }\n            // If user doesn't exist, create account\n            if (signInError.status === 400) {\n                const { data: signUpData, error: signUpError } = await this.supabase.auth.signUp({\n                    email,\n                    password,\n                    options: {\n                        data: {\n                            wallet_address: walletAddress.toLowerCase()\n                        }\n                    }\n                });\n                if (signUpError) {\n                    if (signUpError.status === 429 && retryCount < 3) {\n                        // Wait and retry with exponential backoff\n                        const waitTime = Math.pow(2, retryCount) * 1000;\n                        await this.delay(waitTime);\n                        return this.signInWithWallet(walletAddress, retryCount + 1);\n                    }\n                    throw signUpError;\n                }\n                return {\n                    data: signUpData\n                };\n            }\n            throw signInError;\n        } catch (error) {\n            console.error(\"Auth error:\", error);\n            throw error;\n        } finally{\n            // Set a timeout to reset the auth flag\n            Database.authTimeout = setTimeout(()=>{\n                Database.isAuthenticating = false;\n            }, 2000);\n        }\n    }\n    async storeMessage(senderId, recipientId, message) {\n        try {\n            const { data: { session } } = await this.supabase.auth.getSession();\n            if (!session) {\n                throw new Error(\"Not authenticated\");\n            }\n            const { data, error } = await this.supabase.from(\"messages\").insert([\n                {\n                    sender_id: senderId.toLowerCase(),\n                    recipient_id: recipientId.toLowerCase(),\n                    message,\n                    timestamp: new Date().toISOString()\n                }\n            ]).select();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error in storeMessage:\", error);\n            throw error;\n        }\n    }\n    async getMessages(userId) {\n        try {\n            const { data: { session } } = await this.supabase.auth.getSession();\n            if (!session) {\n                throw new Error(\"Not authenticated\");\n            }\n            const lowerId = userId.toLowerCase();\n            const { data, error } = await this.supabase.from(\"messages\").select(\"*\").or(\"sender_id.eq.\".concat(lowerId, \",recipient_id.eq.\").concat(lowerId)).order(\"timestamp\", {\n                ascending: true\n            });\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error in getMessages:\", error);\n            throw error;\n        }\n    }\n    subscribeToMessages(userId, callback) {\n        const lowerId = userId.toLowerCase();\n        const channel = this.supabase.channel(\"messages\").on(\"postgres_changes\", {\n            event: \"INSERT\",\n            schema: \"public\",\n            table: \"messages\",\n            filter: \"recipient_id=eq.\".concat(lowerId)\n        }, (payload)=>callback(payload.new)).subscribe();\n        return ()=>{\n            channel.unsubscribe();\n        };\n    }\n    async signOut() {\n        await this.supabase.auth.signOut();\n    }\n    destroy() {\n        this.supabase.removeAllChannels();\n    }\n    constructor(){\n        const supabaseUrl = \"https://oaffyeoqdojzqhkmebsw.supabase.co\";\n        const supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9hZmZ5ZW9xZG9qenFoa21lYnN3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzcwNDEyNTIsImV4cCI6MjA1MjYxNzI1Mn0.GVjXT2B9Iptap70ENS_c5TmlAElvI3_DpifCullfYpM\";\n        if (!supabaseUrl || !supabaseKey) {\n            throw new Error(\"Missing Supabase credentials\");\n        }\n        this.supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\n    }\n}\nDatabase.instance = null;\nDatabase.authTimeout = null;\nDatabase.isAuthenticating = false;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvZGF0YWJhc2UudHM/NGQ0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xuXG5leHBvcnQgY2xhc3MgRGF0YWJhc2Uge1xuICBwcml2YXRlIHN1cGFiYXNlO1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogRGF0YWJhc2UgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBzdGF0aWMgYXV0aFRpbWVvdXQ6IE5vZGVKUy5UaW1lb3V0IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgc3RhdGljIGlzQXV0aGVudGljYXRpbmcgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTDtcbiAgICBjb25zdCBzdXBhYmFzZUtleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZO1xuXG4gICAgaWYgKCFzdXBhYmFzZVVybCB8fCAhc3VwYWJhc2VLZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBTdXBhYmFzZSBjcmVkZW50aWFscycpO1xuICAgIH1cblxuICAgIHRoaXMuc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlS2V5KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBEYXRhYmFzZSB7XG4gICAgaWYgKCFEYXRhYmFzZS5pbnN0YW5jZSkge1xuICAgICAgRGF0YWJhc2UuaW5zdGFuY2UgPSBuZXcgRGF0YWJhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIERhdGFiYXNlLmluc3RhbmNlO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBkZWxheShtczogbnVtYmVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xuICB9XG5cbiAgYXN5bmMgc2lnbkluV2l0aFdhbGxldCh3YWxsZXRBZGRyZXNzOiBzdHJpbmcsIHJldHJ5Q291bnQgPSAwKTogUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAoRGF0YWJhc2UuaXNBdXRoZW50aWNhdGluZykge1xuICAgICAgYXdhaXQgdGhpcy5kZWxheSgxMDAwKTsgLy8gV2FpdCAxIHNlY29uZCBiZWZvcmUgcmV0cnlpbmdcbiAgICAgIHJldHVybiB0aGlzLnNpZ25JbldpdGhXYWxsZXQod2FsbGV0QWRkcmVzcywgcmV0cnlDb3VudCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIERhdGFiYXNlLmlzQXV0aGVudGljYXRpbmcgPSB0cnVlO1xuXG4gICAgICAvLyBDbGVhciBhbnkgZXhpc3RpbmcgdGltZW91dFxuICAgICAgaWYgKERhdGFiYXNlLmF1dGhUaW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dChEYXRhYmFzZS5hdXRoVGltZW91dCk7XG4gICAgICAgIERhdGFiYXNlLmF1dGhUaW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZW1haWwgPSBgJHt3YWxsZXRBZGRyZXNzLnRvTG93ZXJDYXNlKCl9QHdlYjNjaGF0LmNvbWA7XG4gICAgICBjb25zdCBwYXNzd29yZCA9IGAke3dhbGxldEFkZHJlc3MudG9Mb3dlckNhc2UoKX1fc2VjcmV0YDtcblxuICAgICAgLy8gQ2hlY2sgY3VycmVudCBzZXNzaW9uXG4gICAgICBjb25zdCB7IGRhdGE6IHsgc2Vzc2lvbiB9IH0gPSBhd2FpdCB0aGlzLnN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpO1xuXG4gICAgICAvLyBJZiBhbHJlYWR5IHNpZ25lZCBpbiB3aXRoIHRoZSBzYW1lIHdhbGxldCwgcmV0dXJuIHRoZSBzZXNzaW9uXG4gICAgICBpZiAoc2Vzc2lvbj8udXNlcj8uZW1haWwgPT09IGVtYWlsKSB7XG4gICAgICAgIHJldHVybiB7IGRhdGE6IHNlc3Npb24gfTtcbiAgICAgIH1cblxuICAgICAgLy8gU2lnbiBvdXQgaWYgc2lnbmVkIGluIHdpdGggYSBkaWZmZXJlbnQgd2FsbGV0XG4gICAgICBpZiAoc2Vzc2lvbikge1xuICAgICAgICBhd2FpdCB0aGlzLnN1cGFiYXNlLmF1dGguc2lnbk91dCgpO1xuICAgICAgICBhd2FpdCB0aGlzLmRlbGF5KDEwMDApOyAvLyBXYWl0IGZvciBzaWdub3V0IHRvIGNvbXBsZXRlXG4gICAgICB9XG5cbiAgICAgIC8vIFRyeSB0byBzaWduIGluXG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yOiBzaWduSW5FcnJvciB9ID0gYXdhaXQgdGhpcy5zdXBhYmFzZS5hdXRoLnNpZ25JbldpdGhQYXNzd29yZCh7XG4gICAgICAgIGVtYWlsLFxuICAgICAgICBwYXNzd29yZCxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXNpZ25JbkVycm9yKSB7XG4gICAgICAgIHJldHVybiB7IGRhdGEgfTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdXNlciBkb2Vzbid0IGV4aXN0LCBjcmVhdGUgYWNjb3VudFxuICAgICAgaWYgKHNpZ25JbkVycm9yLnN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YTogc2lnblVwRGF0YSwgZXJyb3I6IHNpZ25VcEVycm9yIH0gPSBhd2FpdCB0aGlzLnN1cGFiYXNlLmF1dGguc2lnblVwKHtcbiAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIHdhbGxldF9hZGRyZXNzOiB3YWxsZXRBZGRyZXNzLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzaWduVXBFcnJvcikge1xuICAgICAgICAgIGlmIChzaWduVXBFcnJvci5zdGF0dXMgPT09IDQyOSAmJiByZXRyeUNvdW50IDwgMykge1xuICAgICAgICAgICAgLy8gV2FpdCBhbmQgcmV0cnkgd2l0aCBleHBvbmVudGlhbCBiYWNrb2ZmXG4gICAgICAgICAgICBjb25zdCB3YWl0VGltZSA9IE1hdGgucG93KDIsIHJldHJ5Q291bnQpICogMTAwMDtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZGVsYXkod2FpdFRpbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbkluV2l0aFdhbGxldCh3YWxsZXRBZGRyZXNzLCByZXRyeUNvdW50ICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IHNpZ25VcEVycm9yO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgZGF0YTogc2lnblVwRGF0YSB9O1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBzaWduSW5FcnJvcjtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdBdXRoIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBTZXQgYSB0aW1lb3V0IHRvIHJlc2V0IHRoZSBhdXRoIGZsYWdcbiAgICAgIERhdGFiYXNlLmF1dGhUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIERhdGFiYXNlLmlzQXV0aGVudGljYXRpbmcgPSBmYWxzZTtcbiAgICAgIH0sIDIwMDApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN0b3JlTWVzc2FnZShzZW5kZXJJZDogc3RyaW5nLCByZWNpcGllbnRJZDogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhOiB7IHNlc3Npb24gfSB9ID0gYXdhaXQgdGhpcy5zdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcbiAgICAgIFxuICAgICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGF1dGhlbnRpY2F0ZWQnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgdGhpcy5zdXBhYmFzZVxuICAgICAgICAuZnJvbSgnbWVzc2FnZXMnKVxuICAgICAgICAuaW5zZXJ0KFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZW5kZXJfaWQ6IHNlbmRlcklkLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICByZWNpcGllbnRfaWQ6IHJlY2lwaWVudElkLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgfSxcbiAgICAgICAgXSlcbiAgICAgICAgLnNlbGVjdCgpO1xuXG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIHN0b3JlTWVzc2FnZTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRNZXNzYWdlcyh1c2VySWQ6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGE6IHsgc2Vzc2lvbiB9IH0gPSBhd2FpdCB0aGlzLnN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpO1xuICAgICAgXG4gICAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYXV0aGVudGljYXRlZCcpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsb3dlcklkID0gdXNlcklkLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCB0aGlzLnN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdtZXNzYWdlcycpXG4gICAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgICAub3IoYHNlbmRlcl9pZC5lcS4ke2xvd2VySWR9LHJlY2lwaWVudF9pZC5lcS4ke2xvd2VySWR9YClcbiAgICAgICAgLm9yZGVyKCd0aW1lc3RhbXAnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KTtcblxuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBnZXRNZXNzYWdlczonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBzdWJzY3JpYmVUb01lc3NhZ2VzKHVzZXJJZDogc3RyaW5nLCBjYWxsYmFjazogKG1lc3NhZ2U6IGFueSkgPT4gdm9pZCkge1xuICAgIGNvbnN0IGxvd2VySWQgPSB1c2VySWQudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBjaGFubmVsID0gdGhpcy5zdXBhYmFzZVxuICAgICAgLmNoYW5uZWwoJ21lc3NhZ2VzJylcbiAgICAgIC5vbihcbiAgICAgICAgJ3Bvc3RncmVzX2NoYW5nZXMnLFxuICAgICAgICB7XG4gICAgICAgICAgZXZlbnQ6ICdJTlNFUlQnLFxuICAgICAgICAgIHNjaGVtYTogJ3B1YmxpYycsXG4gICAgICAgICAgdGFibGU6ICdtZXNzYWdlcycsXG4gICAgICAgICAgZmlsdGVyOiBgcmVjaXBpZW50X2lkPWVxLiR7bG93ZXJJZH1gLFxuICAgICAgICB9LFxuICAgICAgICAocGF5bG9hZCkgPT4gY2FsbGJhY2socGF5bG9hZC5uZXcpXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2hhbm5lbC51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH1cblxuICBhc3luYyBzaWduT3V0KCkge1xuICAgIGF3YWl0IHRoaXMuc3VwYWJhc2UuYXV0aC5zaWduT3V0KCk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuc3VwYWJhc2UucmVtb3ZlQWxsQ2hhbm5lbHMoKTtcbiAgfVxufSJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJEYXRhYmFzZSIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJkZWxheSIsIm1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0Iiwic2lnbkluV2l0aFdhbGxldCIsIndhbGxldEFkZHJlc3MiLCJyZXRyeUNvdW50IiwiaXNBdXRoZW50aWNhdGluZyIsInNlc3Npb24iLCJhdXRoVGltZW91dCIsImNsZWFyVGltZW91dCIsImVtYWlsIiwidG9Mb3dlckNhc2UiLCJwYXNzd29yZCIsImRhdGEiLCJzdXBhYmFzZSIsImF1dGgiLCJnZXRTZXNzaW9uIiwidXNlciIsInNpZ25PdXQiLCJlcnJvciIsInNpZ25JbkVycm9yIiwic2lnbkluV2l0aFBhc3N3b3JkIiwic3RhdHVzIiwic2lnblVwRGF0YSIsInNpZ25VcEVycm9yIiwic2lnblVwIiwib3B0aW9ucyIsIndhbGxldF9hZGRyZXNzIiwid2FpdFRpbWUiLCJNYXRoIiwicG93IiwiY29uc29sZSIsInN0b3JlTWVzc2FnZSIsInNlbmRlcklkIiwicmVjaXBpZW50SWQiLCJtZXNzYWdlIiwiRXJyb3IiLCJmcm9tIiwiaW5zZXJ0Iiwic2VuZGVyX2lkIiwicmVjaXBpZW50X2lkIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic2VsZWN0IiwiZ2V0TWVzc2FnZXMiLCJ1c2VySWQiLCJsb3dlcklkIiwib3IiLCJvcmRlciIsImFzY2VuZGluZyIsInN1YnNjcmliZVRvTWVzc2FnZXMiLCJjYWxsYmFjayIsImNoYW5uZWwiLCJvbiIsImV2ZW50Iiwic2NoZW1hIiwidGFibGUiLCJmaWx0ZXIiLCJwYXlsb2FkIiwibmV3Iiwic3Vic2NyaWJlIiwidW5zdWJzY3JpYmUiLCJkZXN0cm95IiwicmVtb3ZlQWxsQ2hhbm5lbHMiLCJjb25zdHJ1Y3RvciIsInN1cGFiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/database.ts\n"));

/***/ })

});